#!/bin/bash
source `dirname $0`/common.sh

CH=6
CAP_FILE=out.cap
PAYLOAD="01234567890123456789"

[ "$1" != "noreload" ] && reload_card

# must be in monitor for injection
set_monitor $IFACE
fw_set_ch $IFACE $CH
set_channel $MON_IFACE $CH

# start capturing on MON_IFACE
start_capture_filter_mac $MON_IFACE $CAP_FILE $IFACE &
sleep 2
cap_pid=$!

# pew pew
testmode $IFACE send_data_multicast $PAYLOAD
testmode $IFACE send_data_multicast $PAYLOAD
testmode $IFACE send_data_multicast $PAYLOAD
testmode $IFACE send_data_multicast $PAYLOAD
testmode $IFACE send_data_multicast $PAYLOAD
testmode $IFACE send_data_multicast $PAYLOAD

sleep 1
stop_all_captures

# inspect capture for frame
IFACE_ADDR=`if2mac $IFACE`
FOUND=`tshark -r$CAP_FILE -Y"wlan.addr == $IFACE_ADDR" | wc -l`
[ "$FOUND" -lt 1 ] && fail "couldn't find frames from $IFACE_ADDR"

# Our test frames are UDP with udp port 0x123.  Look for that.
FOUND=`tshark -r$CAP_FILE -Y"wlan.addr == $IFACE_ADDR && udp.port == 0x123" | wc -l`
[ "$FOUND" -lt 1 ] && fail "Frames from $IFACE_ADDR have an invalid UDP format"

# And now confirm payload integrity
FOUND=`tshark -r$CAP_FILE -Y"wlan.addr == $IFACE_ADDR && udp.port == 0x123 && data.data == \"$PAYLOAD\"" | wc -l`
[ "$FOUND" -lt 1 ] && fail "Frames from $IFACE_ADDR have an invalid payload"

# Test previous check
FOUND=`tshark -r$CAP_FILE -Y"wlan.addr == $IFACE_ADDR && udp.port == 0x123 && data.data == \"beef\"" | wc -l`
[ "$FOUND" -ge 1 ] && fail "Frames from $IFACE_ADDR have an invalid payload"
exit 0
